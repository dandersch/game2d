- [X] resourcemanager (just for textures for now)
- [X] camera with scrolling
- [X] worldToScreen() and screenToWorld() functions
- [X] eventsystem
- [X] use states & orientations for entities
- [X] use & read in pivots
- [X] entities have animation[]
- [X] use commands for the playercontroller
- [X] have a commands[] for every entity
- [X] commandProcessor that records to/replays from array
- [X] timeloop
- [X] timerewind
- [X] inputmapper
- [X] fixed deltatime timestep
- [X] ui & menu
- [X] segfault when going fullscreen
- [X] clickable entities
- [X] Tiles should prob. not be entites and have their own array instead
- [X] platform layer w/ strict separation
- [X] try setting up a unity build
- [X] set up hotloading

- [ ] fix exit button
- [ ] improve code hotloading
- [ ] replace tmxlite library
- [ ] add (debug) logging
- [ ] implement platform_win32.cpp
- [ ] set up a renderer api & start using openGL
- [ ] set up a memory arena & use it for the game/platform layer (no more malloc)
- [ ] use stb-style header files for everything
- [ ] animation system
- [ ] timer utility
- [ ] use interpolation for movement
- [ ] sound/audiosystem
- [ ] add EntityHandles and use them instead of raw pointers
- [ ] tilemap culling
- [ ] import character/items sprite with tmx
- [ ] support layers when reading in a tmx
- [ ] import animations in tmx
- [ ] camera with zooming
- [ ] application class that provides a main loop for emscripten
- [ ] threadpool
- [ ] profiling tools
- [ ] serializing (of cmds[])
- [ ] entitymanager (handles entity array & can ask for free slot etc.)
- [ ] "AI"controller subsystem
- [ ] implement composite colliders
- [ ] uncap framerate (curr. capped to 60FPS)
